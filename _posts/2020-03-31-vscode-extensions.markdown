---
layout: post
title:  "VS Code : Cr√©er ses propres extensions"
date:   2020-02-31 07:00:00.000 +01:00
# categories: blog
# description: 
img: posts/vscode-banner.png
tags: [Azure, VSCode]
---

Aujourd'hui je vais vous montrer comment cr√©er vous-m√™me une extension dans VS Code quand on n'y conna√Æt rien... et m√™me si on est une quiche en TypeScript ;)

Si vous √™tes arriv√© sur ce post, c'est que vous √™tes probablement un utilisateur de VS Code et de ses extensions. Vous avez probablement install√© les basiques pour avoir l'intellisense sur votre langage pr√©f√©r√©, vous connecter √† votre source control Git ou pour vous aider √† cr√©er des fichiers JSON ou YAML.

Dans cet article, nous referons un tour d'horizon de ce qu'est une extension VS Code et nous verrons les bases de la cr√©ation d'une extension.

<!-- Pour l'exercice je vous propose de cr√©er une extension assez simple mais utile.
Mais, qu'est-ce qu'une extension utile ?
Pour ma part j'ai une m√©moire de poisson rouge quand et j'oublie toujours les commandes de git, dotnet ou autre CLI (Command-Line Interface). J'ai donc cr√©√© des cheat-sheet pour git, puis pour dotnet, permettant de retrouver les commandes via une recherche "logique".
Nous allons voir ici comment faire la m√™me chose pour la cli d'azure ou "az cli".
Mais surtout, nous allons essayer de cr√©er un mod√®le que vous pourrez r√©utiliser et adapter √† vos besoins. -->

**\[TLDR\]** Si vous souhaitez directement voir comment cr√©er une extension sans la partie th√©orique, je vous propose d'aller directement √† la partie [Environnement de travail](#Environnement-de-travail).

## Visual Studio Code

> " VS Code est un √©diteur de code source l√©ger et un environnement de d√©veloppement puissant pour la cr√©ation et le d√©bogage d'applications Web et cloud modernes.

Il est gratuit et disponible sur votre plate-forme pr√©f√©r√©e :

- Linux,
- MacOS,
- Windows.

Parmi ses fonctionnalit√©s, on compte :

- Intellisense : Code-compl√©tion intelligente (variables, m√©thodes, modules)
- Debug tools (breakpoints, terminal)
- Edition puissante (multi-curseur, info param√™tres, refactoring, navigation, etc.)
- Source Control (Git, TFS, ‚Ä¶)

## Les Extensions

VS Code est extensible. C'est-√†-dire que des fonctionnalit√©s peuvent √™tre ajout√©es telles des plugins √† VSCode. Ces nouvelles fonctionnalit√©s s'appellent des **extensions**.

Vous pouvez les retrouver via le panneau lat√©ral en ouvrant l'Extensions View.

![AZ-400 Pluralsight Path details](/assets/img/posts/vsce-extensions-view.png)

Dans cette vue vous pourrez:

- Rechercher des extensions
- Inspecter (changelog, commands, etc.) des extensions pour conna√Ætre les d√©tails
- Installer une extension (Install, Reload, Update)

## Extension Generator

La cr√©ation d'extension se fait en utilisant un moteur intitul√© **Yeoman** qui orchestre des **g√©n√©rateurs**, dont un sp√©cifiquement pour les extensions VS Code.
Ce moteur se base sur Node.js et fonctionne en ligne de commande.

![Yeoman](/assets/img/posts/vsce-yeoman.png)

## Extension Description

Les extensions contiennent un fichier de description servant plusieurs buts.
Tout d'abord, nous allons pouvoir y d√©clarer son *identit√©*, avec son nom, celui de l'√©diteur, voire du repository si jamais l'extension est open-source.
Nous allons √©galement pouvoir y renseigner des informations plus techniques sur le mode de fonctionnement (lancement, settings, etc.).

Les extensions peuvent avoir des d√©pendances suppl√©mentaires telles que des linters autonomes, des compilateurs ou des fichiers de configuration personnalis√©s afin de fonctionner correctement.
Le fichier README de l'extension, affich√© dans le volet *D√©tails* de la vue *Extensions*, inclut des d√©tails sur la configuration et l'utilisation de l'extension.

Voici, par exemple, la description de mon extension **Git CLI Explorer**.

![extension details view](/assets/img/posts/vsce-details-view.png)

## Extension API

### Activation Events

Votre extension va devoir √™tre d√©clench√©e. Elle peut √™tre d√©clench√©e par un √©v√®nement ou un contexte particulier. Ces *√©v√®nements* d'activation sont d√©crits dans le fichier **package.json**

![extension details view](/assets/img/posts/vsce-activationevents.png)

Nous pourrons y trouver des **activation events** tels que:

- onLanguage:${language}
- onCommand:${command}
- onDebug
- workspaceContains:${toplevelfilename}
- onFileSystem:${scheme}
- onView:${viewId}
- onUri
- onWebviewPanel:${viewType}

### Commands (ou Command Handler)

Une extension peut √©galement √™tre d√©clench√©e via des commandes sp√©cifiques qui seront appel√©es, soit par l'utilisateur, soit par d'autres extensions.

Ces commandes sont d√©crites dans le fichier **extension.ts**

![extension details view](/assets/img/posts/vsce-commands-declaration.png)

Elles sont ensuite d√©clar√©es via un *binding* ou *liaison* dans le fichier **package.json**.

![extension details view](/assets/img/posts/vsce-commands-binding.png)

L'erreur de d√©butant est de d√©finir la logique de la commande, de faire le *registerCommand* et d'oublier sa d√©claration.
Ne l'oubliez surtout pas car c'est le *contrat* de votre extension qui permettra donc √† VS Code de savoir quels en sont les d√©clencheurs.

### Complex Commands

Bien evidemment, vous pouvez aller plus loin et cr√©er des extensions avanc√©es avec des logiques complexes. Pour cela vous pourrez vous baser sur des API VSCode :

- vscode.diff
- vscode.open
- cursorMove
- vscode.ExectureDocumentRenameProvider
- etc.

```javascript
let uri = Uri.file('/some/path/to/folder‚Äô);
let success = await commands.executeCommand('vscode.openFolder', uri);
```

Vous pourrez trouver toutes les API disponibles en suivant ce lien vers la documentation officielle :
[Built-in Commands](https://code.visualstudio.com/docs/extensionAPI/vscode-api-commands)

<!-- ## Publication

### vsce - packaging

Command-Line

```bash
npm install ‚Äìg vsce
```

Packaging (local, sideloading, CI, etc.)

```bash
vsce package
```

### vsce - publish

Cr√©ation d‚Äôun compte Publisher
Azure DevOps ‚Äì Personal Acces Token

```bash
vsce create-publisher <your_name>
```

(vous demandera le token)

ou depuis la page de management https://marketplace.visualstudio.com/manage

```bash
vsce-login
```

Publication

```bash
vsce publish
vsce publish ‚Äìt <token>
vsce publish minor
vsce publish 2.0.1
``` -->

## Environnement de travail

Pour commencer il faut installer quelques outils.

Il faudra bien √©videmment avoir VS Code que vous pourrez t√©l√©charger en suivant ce lien: [https://code.visualstudio.com/Download](https://code.visualstudio.com/Download)

Vous devrez ensuite installer le *moteur de g√©n√©rateurs* **Yeoman**. Il s'agit d'un outil bas√© sur **Node.js** qui vous permettra de cr√©er des extensions via un formulaire en ligne de commande.

Commencez donc par installer Node.js si ce n'est pas d√©ja fait: [https://nodejs.org/en/](https://nodejs.org/en/)

Vous pourrez alors installer le g√©n√©rateur *VS Code Extension Generator* avec la commande suivante:

```bash
npm install -g yo generator-code
```

## G√©n√©rer l'extension

### Espace de travail

Nous allons commencer par initialiser notre espace de travail. Il faut donc se placer dans le r√©pertoire qui contiendra le code de votre extension. C'est dans ce dossier parent que le g√©n√©rateur cr√©era un dossier pour votre extension. Pour ma part, il s'agit du r√©pertoire *'repos'*.

Placez-vous donc dans le dossier de votre choix et ouvrez celui-ci dans VS Code ou une fen√™tre de commande.

### Utiliser le g√©n√©rateur

Pour utiliser Yeoman et plus sp√©cifiquement le g√©n√©rateur d'extension VS Code, il faut lancer la commande suivante:

```bash
yo code
```

Un *formulaire* s'ouvre alors dans votre terminal.
Pour ma part j'ai cr√©√© une extension nomm√©e **helloWorld**, mais vous pouvez bien √©videmment choisir le nom de votre choix et remplacer dans les insctructions suivantes.
Renseignez donc les param√®tres suivants :

- type : **New Extension (TypeScript)**
- name : **helloWorld**
- identifier : **helloWorld**
- description : **Dynamic Cheat Sheet for Azure CLI**
- publisher name : **votre publisher name**
- Enable stricter TypeScript checking : **Y**
- Setup linting using 'tslint' : **Y**
- Initialize a git repository? : **n**

![yo code success](/assets/img/posts/vsce-yoCodeHelloWorld.png)

Un nouveau dossier **helloWorld** a √©t√© cr√©√©.

### Initialiser le workspace

Le code de base de notre extension √©tant g√©n√©r√©, nous pouvons ouvrir cet espace de travail dans VS Code:

```bash
cd helloWorld
code .
```

## Debug de l'extension

Appuyez sur `F5`

Une nouvelle fen√™tre VS Code doit s'ouvrir, intitul√©e `Extension Development Host`.
Dans cette fen√™tre, vous pouvez utiliser votre extension.

## Ex√©cution de la commande

Appuyez sur `Ctrl + Shift + P` pour Windows (`Cmd +Shift + P` pour Mac) et lancez la commande `Hello World`.

![VSCE command hello world](/assets/img/posts/vsce-commandHelloWorld.png)

Une fen√™tre de message doit alors appara√Ætre avec le message `Hello World`.

![VSCE Dialog window hello world](/assets/img/posts/vsce-dialogHelloWorld.png)

## Modifier la commande

Ouvrez le fichier *package.json* et remplacez le code suivant :

```javascript
"commands": [
    {
        "command": "extension.sayHello",
        "title": "Say Good Evening"
    }
]
```

Ouvrez le fichier *extension.ts* et remplacez le code suivant :

```javascript
// Display a message box to the user
vscode.window.showInformationMessage('Good Evening !');
```

Appuyez sur `F5` pour lancer l'extension et lancez la commande `Say Good Evening`.
Vous devriez alors voir le message suivant :

![VSCE dialog Good Evening](/assets/img/posts/vsce-dialogGoodEvening.png)

## Conclusion

Voil√†, vous avez cr√©√© votre premi√®re extension. ü•≥

Ok elle est un peu simple mais vous avez les bases pour cr√©er des extensions un peu plus utiles.

Je vous donne d'ailleurs rendez-vous dans quelques jours pour d√©couvrir comment cr√©er une cheat-sheet dynamique avec VS Code.

D'ici l√†, **#restezchezvous** !!!
